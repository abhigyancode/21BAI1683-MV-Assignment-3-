# -*- coding: utf-8 -*-
"""21BAI1683 MV Assignment 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ilx0138UaR6tyVXlWbOHeuAKeOhG_vp3
"""

from moviepy.editor import VideoFileClip
from PIL import Image, ImageChops
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image, ImageChops, ImageDraw

def load_video_frames(file_path, fps=1):
    clip = VideoFileClip(file_path)
    frames = [frame for frame in clip.iter_frames(fps=fps)]
    return frames

video_file = '/content/MV Recording 2 Assignment 3.mp4'
frames = load_video_frames(video_file, fps=1)
print(f'Total frames extracted: {len(frames)}')

def segment_frame(frame, lower_bound, upper_bound):
    img = Image.fromarray(frame)
    hsv = img.convert('HSV')
    mask = np.zeros(hsv.size[::-1], dtype=np.uint8)

    for x in range(hsv.width):
        for y in range(hsv.height):
            pixel = hsv.getpixel((x, y))
            if lower_bound[0] <= pixel[0] <= upper_bound[0] and \
               lower_bound[1] <= pixel[1] <= upper_bound[1] and \
               lower_bound[2] <= pixel[2] <= upper_bound[2]:
                mask[y, x] = 255

    segmented = Image.fromarray(np.where(mask[:, :, None], frame, [0, 0, 0]).astype(np.uint8))
    return mask, segmented

lower_bound = (30, 50, 50)
upper_bound = (80, 255, 255)

segmented_frames = [segment_frame(frame, lower_bound, upper_bound) for frame in frames]

def detect_scene_cuts(frames, threshold=1000000):
    hard_cuts = []
    soft_cuts = []

    for i in range(1, len(frames)):
        prev_img = Image.fromarray(frames[i - 1])
        curr_img = Image.fromarray(frames[i])

        diff = ImageChops.difference(prev_img, curr_img)
        diff_pixels = np.sum(np.array(diff) > 50)

        if diff_pixels > threshold:
            hard_cuts.append(i)
        else:
            hist_diff = sum(abs(a - b) for a, b in zip(prev_img.histogram(), curr_img.histogram()))
            if hist_diff > 100000:
                soft_cuts.append(i)

    return hard_cuts, soft_cuts

hard_cuts, soft_cuts = detect_scene_cuts(frames)
print(f'Hard cuts detected at frames: {hard_cuts}')
print(f'Soft cuts detected at frames: {soft_cuts}')

def mark_scene_cuts(frames, hard_cuts, soft_cuts):
    marked_frames = []
    for i, frame in enumerate(frames):
        img = Image.fromarray(frame)
        draw = ImageDraw.Draw(img)

        if i in hard_cuts:
            draw.text((10, 10), "Hard Cut", fill=(255, 0, 0))
        elif i in soft_cuts:
            draw.text((10, 10), "Soft Cut", fill=(0, 0, 255))

        marked_frames.append(img)
    return marked_frames

cut_frames = mark_scene_cuts(frames, hard_cuts, soft_cuts)

import math
from PIL import ImageFilter

def segment_frame(frame):
    segmented = frame.convert("L").filter(ImageFilter.FIND_EDGES)
    return segmented

def display_results(frames, hard_cuts, soft_cuts, max_columns=3):
    total_hard = len(hard_cuts)
    total_soft = len(soft_cuts)
    total_cuts = total_hard + total_soft

    if total_cuts == 0:
        print("No scene cuts detected.")
        return

    rows_hard = math.ceil(total_hard / max_columns)
    rows_soft = math.ceil(total_soft / max_columns)

    fig, axes = plt.subplots((rows_hard + rows_soft) * 2, max_columns, figsize=(20, (rows_hard + rows_soft) * 5))
    fig.suptitle('Scene Cuts and Segmentation', fontsize=24)
    axes = axes.flatten()

    for i, cut in enumerate(hard_cuts):
        axes[2 * i].imshow(frames[cut])
        axes[2 * i].set_title(f'Hard Cut at Frame {cut}', fontsize=14)
        axes[2 * i].axis('off')

        segmented_frame = segment_frame(frames[cut])
        axes[2 * i + 1].imshow(segmented_frame, cmap='gray')
        axes[2 * i + 1].set_title(f'Segmented Frame {cut}', fontsize=14)
        axes[2 * i + 1].axis('off')

    offset = rows_hard * max_columns * 2
    for j, cut in enumerate(soft_cuts):
        axes[offset + 2 * j].imshow(frames[cut])
        axes[offset + 2 * j].set_title(f'Soft Cut at Frame {cut}', fontsize=14)
        axes[offset + 2 * j].axis('off')

        segmented_frame = segment_frame(frames[cut])
        axes[offset + 2 * j + 1].imshow(segmented_frame, cmap='gray')
        axes[offset + 2 * j + 1].set_title(f'Segmented Frame {cut}', fontsize=14)
        axes[offset + 2 * j + 1].axis('off')

    for ax in axes[total_cuts * 2:]:
        ax.axis('off')

    plt.subplots_adjust(wspace=0.3, hspace=0.5)
    plt.show()

display_results(cut_frames, hard_cuts, soft_cuts, max_columns=3)